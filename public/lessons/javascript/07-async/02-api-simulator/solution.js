// Base de donn√©es simul√©e
const utilisateurs = {
  1: { id: 1, nom: 'Alice', email: 'alice@email.com' },
  2: { id: 2, nom: 'Bob', email: 'bob@email.com' }
};

const commandes = {
  1: [
    { id: 101, userId: 1, produit: 'Laptop', prix: 999 },
    { id: 102, userId: 1, produit: 'Souris', prix: 25 }
  ],
  2: [
    { id: 103, userId: 2, produit: 'Clavier', prix: 75 }
  ]
};

const detailsCommandes = {
  101: { id: 101, statut: 'livr√©', date: '2025-01-15', adresse: '123 Rue de la Paix' },
  102: { id: 102, statut: 'en cours', date: '2025-01-20', adresse: '123 Rue de la Paix' },
  103: { id: 103, statut: 'exp√©di√©', date: '2025-01-18', adresse: '456 Avenue des Champs' }
};

function obtenirUtilisateur(id) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const utilisateur = utilisateurs[id];
      if (utilisateur) {
        console.log(`‚úÖ Utilisateur ${id} trouv√©`);
        resolve(utilisateur);
      } else {
        console.log(`‚ùå Utilisateur ${id} non trouv√©`);
        reject('Utilisateur non trouv√©');
      }
    }, 500);
  });
}

function obtenirCommandes(userId) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const commandesUser = commandes[userId];
      if (commandesUser) {
        console.log(`‚úÖ ${commandesUser.length} commande(s) trouv√©e(s) pour l'utilisateur ${userId}`);
        resolve(commandesUser);
      } else {
        console.log(`‚ùå Aucune commande pour l'utilisateur ${userId}`);
        reject('Aucune commande trouv√©e');
      }
    }, 700);
  });
}

function obtenirDetails(commandeId) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const details = detailsCommandes[commandeId];
      if (details) {
        console.log(`‚úÖ D√©tails de la commande ${commandeId} trouv√©s`);
        resolve(details);
      } else {
        console.log(`‚ùå D√©tails de la commande ${commandeId} non trouv√©s`);
        reject('D√©tails de commande non trouv√©s');
      }
    }, 300);
  });
}

// Test du cha√Ænage avec Promises
console.log('üîÑ D√©but du test avec Promises...');
obtenirUtilisateur(1)
  .then(utilisateur => {
    console.log('üë§ Utilisateur:', utilisateur);
    return obtenirCommandes(utilisateur.id);
  })
  .then(commandesUser => {
    console.log('üõí Commandes:', commandesUser);
    return obtenirDetails(commandesUser[0].id);
  })
  .then(details => {
    console.log('üì¶ D√©tails de la premi√®re commande:', details);
  })
  .catch(erreur => {
    console.log('üí• Erreur:', erreur);
  })
  .finally(() => {
    console.log('‚ú® Test termin√©');
  });

/*
// Version avec async/await
async function testAvecAsyncAwait() {
  try {
    console.


*/